type token =
  | EOF
  | INT of (int)
  | IDENT of (string)
  | UNIT
  | TUNIT
  | SEMICOLON
  | LPAREN
  | RPAREN
  | LAMBDA
  | DOT
  | ARROW
  | COLON
  | BOOL
  | IF
  | THEN
  | ELSE
  | TRUE
  | FALSE
  | LET
  | IN
  | EQUAL

open Parsing;;
let _ = parse_error;;
# 8 "parser.mly"
open Ast
# 29 "parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  259 (* UNIT *);
  260 (* TUNIT *);
  261 (* SEMICOLON *);
  262 (* LPAREN *);
  263 (* RPAREN *);
  264 (* LAMBDA *);
  265 (* DOT *);
  266 (* ARROW *);
  267 (* COLON *);
  268 (* BOOL *);
  269 (* IF *);
  270 (* THEN *);
  271 (* ELSE *);
  272 (* TRUE *);
  273 (* FALSE *);
  274 (* LET *);
  275 (* IN *);
  276 (* EQUAL *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* IDENT *);
    0|]

let yylhs = "\255\255\
\001\000\004\000\004\000\004\000\004\000\002\000\002\000\002\000\
\002\000\005\000\005\000\003\000\003\000\006\000\006\000\006\000\
\006\000\006\000\000\000"

let yylen = "\002\000\
\002\000\003\000\001\000\001\000\003\000\006\000\001\000\001\000\
\006\000\001\000\003\000\001\000\002\000\001\000\001\000\001\000\
\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\014\000\017\000\000\000\000\000\000\000\015\000\
\016\000\019\000\000\000\000\000\008\000\000\000\000\000\000\000\
\000\000\001\000\000\000\013\000\018\000\000\000\000\000\000\000\
\004\000\000\000\003\000\000\000\000\000\000\000\000\000\000\000\
\000\000\005\000\000\000\000\000\000\000"

let yydgoto = "\002\000\
\010\000\011\000\012\000\028\000\013\000\014\000"

let yysindex = "\010\000\
\011\255\000\000\000\000\000\000\011\255\018\255\011\255\000\000\
\000\000\000\000\004\000\027\255\000\000\000\000\030\255\021\255\
\251\254\000\000\011\255\000\000\000\000\019\255\011\255\034\255\
\000\000\019\255\000\000\032\255\253\254\252\254\011\255\019\255\
\011\255\000\000\034\255\035\255\034\255"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\000\000\001\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\016\000\031\255\018\000"

let yygindex = "\000\000\
\000\000\003\000\000\000\245\255\000\000\034\000"

let yytablesize = 289
let yytable = "\019\000\
\010\000\019\000\034\000\018\000\007\000\032\000\011\000\015\000\
\023\000\017\000\001\000\033\000\003\000\004\000\030\000\006\000\
\005\000\009\000\006\000\016\000\036\000\024\000\025\000\007\000\
\026\000\029\000\008\000\009\000\003\000\004\000\027\000\022\000\
\005\000\035\000\019\000\037\000\021\000\002\000\019\000\002\000\
\031\000\032\000\008\000\009\000\032\000\020\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\012\000\012\000\000\000\010\000\012\000\010\000\
\019\000\007\000\000\000\007\000\000\000\011\000\010\000\010\000\
\012\000\012\000\007\000\007\000\011\000\011\000\006\000\000\000\
\009\000\000\000\000\000\000\000\000\000\006\000\006\000\009\000\
\009\000"

let yycheck = "\005\001\
\000\000\005\001\007\001\000\000\000\000\010\001\000\000\005\000\
\014\001\007\000\001\000\015\001\002\001\003\001\026\000\000\000\
\006\001\000\000\008\001\002\001\032\000\019\000\004\001\013\001\
\006\001\023\000\016\001\017\001\002\001\003\001\012\001\011\001\
\006\001\031\000\005\001\033\000\007\001\007\001\005\001\009\001\
\009\001\010\001\016\001\017\001\010\001\012\000\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\002\001\003\001\255\255\005\001\006\001\007\001\
\005\001\005\001\255\255\007\001\255\255\007\001\014\001\015\001\
\016\001\017\001\014\001\015\001\014\001\015\001\007\001\255\255\
\007\001\255\255\255\255\255\255\255\255\014\001\015\001\014\001\
\015\001"

let yynames_const = "\
  EOF\000\
  UNIT\000\
  TUNIT\000\
  SEMICOLON\000\
  LPAREN\000\
  RPAREN\000\
  LAMBDA\000\
  DOT\000\
  ARROW\000\
  COLON\000\
  BOOL\000\
  IF\000\
  THEN\000\
  ELSE\000\
  TRUE\000\
  FALSE\000\
  LET\000\
  IN\000\
  EQUAL\000\
  "

let yynames_block = "\
  INT\000\
  IDENT\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 29 "parser.mly"
                                    ( _1 )
# 207 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : typ) in
    Obj.repr(
# 33 "parser.mly"
                                    ( TFun(_1, _3) )
# 215 "parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 34 "parser.mly"
                                    ( TBool )
# 221 "parser.ml"
               : typ))
; (fun __caml_parser_env ->
    Obj.repr(
# 35 "parser.mly"
                                    ( TUnit )
# 227 "parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : typ) in
    Obj.repr(
# 36 "parser.mly"
                                    ( _2 )
# 234 "parser.ml"
               : typ))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : typ) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 40 "parser.mly"
                                    ( EVal(VFun(_2, _4, _6)) )
# 243 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : exp) in
    Obj.repr(
# 41 "parser.mly"
                                    ( _1 )
# 250 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'seq_expr) in
    Obj.repr(
# 42 "parser.mly"
                                    ( _1 )
# 257 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Ast.exp) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 43 "parser.mly"
                                    ( EIf(_2, _4, _6) )
# 266 "parser.ml"
               : Ast.exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 47 "parser.mly"
                                    ( _1 )
# 273 "parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Ast.exp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Ast.exp) in
    Obj.repr(
# 48 "parser.mly"
                                    ( ESeq(_1, _3) )
# 281 "parser.ml"
               : 'seq_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 52 "parser.mly"
                                    ( _1 )
# 288 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : exp) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'aexp) in
    Obj.repr(
# 53 "parser.mly"
                                    ( EApp(_1, _2) )
# 296 "parser.ml"
               : exp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 57 "parser.mly"
                                    ( EVar _1 )
# 303 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "parser.mly"
                                    ( EVal(VTrue) )
# 309 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                                    ( EVal(VFalse) )
# 315 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "parser.mly"
                                    ( EVal(VUnit) )
# 321 "parser.ml"
               : 'aexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Ast.exp) in
    Obj.repr(
# 61 "parser.mly"
                                    ( _2 )
# 328 "parser.ml"
               : 'aexp))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Ast.exp)
